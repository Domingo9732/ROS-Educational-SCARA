// Generated by gencpp from file scara_control/FinalJoints.msg
// DO NOT EDIT!


#ifndef SCARA_CONTROL_MESSAGE_FINALJOINTS_H
#define SCARA_CONTROL_MESSAGE_FINALJOINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_control
{
template <class ContainerAllocator>
struct FinalJoints_
{
  typedef FinalJoints_<ContainerAllocator> Type;

  FinalJoints_()
    : position1(0.0)
    , position2(0.0)
    , position3(0.0)
    , position4(0.0)
    , position5(0.0)  {
    }
  FinalJoints_(const ContainerAllocator& _alloc)
    : position1(0.0)
    , position2(0.0)
    , position3(0.0)
    , position4(0.0)
    , position5(0.0)  {
  (void)_alloc;
    }



   typedef double _position1_type;
  _position1_type position1;

   typedef double _position2_type;
  _position2_type position2;

   typedef double _position3_type;
  _position3_type position3;

   typedef double _position4_type;
  _position4_type position4;

   typedef double _position5_type;
  _position5_type position5;





  typedef boost::shared_ptr< ::scara_control::FinalJoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_control::FinalJoints_<ContainerAllocator> const> ConstPtr;

}; // struct FinalJoints_

typedef ::scara_control::FinalJoints_<std::allocator<void> > FinalJoints;

typedef boost::shared_ptr< ::scara_control::FinalJoints > FinalJointsPtr;
typedef boost::shared_ptr< ::scara_control::FinalJoints const> FinalJointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_control::FinalJoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_control::FinalJoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_control::FinalJoints_<ContainerAllocator1> & lhs, const ::scara_control::FinalJoints_<ContainerAllocator2> & rhs)
{
  return lhs.position1 == rhs.position1 &&
    lhs.position2 == rhs.position2 &&
    lhs.position3 == rhs.position3 &&
    lhs.position4 == rhs.position4 &&
    lhs.position5 == rhs.position5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_control::FinalJoints_<ContainerAllocator1> & lhs, const ::scara_control::FinalJoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scara_control::FinalJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_control::FinalJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_control::FinalJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_control::FinalJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_control::FinalJoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_control::FinalJoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_control::FinalJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "712247e92305cbb82bc845aeb83a58bf";
  }

  static const char* value(const ::scara_control::FinalJoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x712247e92305cbb8ULL;
  static const uint64_t static_value2 = 0x2bc845aeb83a58bfULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_control::FinalJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_control/FinalJoints";
  }

  static const char* value(const ::scara_control::FinalJoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_control::FinalJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 position1\n"
"float64 position2\n"
"float64 position3\n"
"float64 position4\n"
"float64 position5\n"
;
  }

  static const char* value(const ::scara_control::FinalJoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_control::FinalJoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position1);
      stream.next(m.position2);
      stream.next(m.position3);
      stream.next(m.position4);
      stream.next(m.position5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FinalJoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_control::FinalJoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_control::FinalJoints_<ContainerAllocator>& v)
  {
    s << indent << "position1: ";
    Printer<double>::stream(s, indent + "  ", v.position1);
    s << indent << "position2: ";
    Printer<double>::stream(s, indent + "  ", v.position2);
    s << indent << "position3: ";
    Printer<double>::stream(s, indent + "  ", v.position3);
    s << indent << "position4: ";
    Printer<double>::stream(s, indent + "  ", v.position4);
    s << indent << "position5: ";
    Printer<double>::stream(s, indent + "  ", v.position5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_CONTROL_MESSAGE_FINALJOINTS_H
